// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/gsokolovskii/code/mafia_bot/internal/db/interfaces.go

// Package test_common is a generated GoMock package.
package test_common

import (
	sql "database/sql"
	reflect "reflect"

	db "github.com/GeorgeS1995/mafia_bot/internal/db"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	gorm "gorm.io/gorm"
)

// MockMafiaDBInterface is a mock of MafiaDBInterface interface.
type MockMafiaDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMafiaDBInterfaceMockRecorder
}

// MockMafiaDBInterfaceMockRecorder is the mock recorder for MockMafiaDBInterface.
type MockMafiaDBInterfaceMockRecorder struct {
	mock *MockMafiaDBInterface
}

// NewMockMafiaDBInterface creates a new mock instance.
func NewMockMafiaDBInterface(ctrl *gomock.Controller) *MockMafiaDBInterface {
	mock := &MockMafiaDBInterface{ctrl: ctrl}
	mock.recorder = &MockMafiaDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMafiaDBInterface) EXPECT() *MockMafiaDBInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMafiaDBInterface) Create(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMafiaDBInterfaceMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMafiaDBInterface)(nil).Create), value)
}

// GetDailyStatistic mocks base method.
func (m *MockMafiaDBInterface) GetDailyStatistic(DaySwitchHour int) ([]*db.DailyStatistic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyStatistic", DaySwitchHour)
	ret0, _ := ret[0].([]*db.DailyStatistic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyStatistic indicates an expected call of GetDailyStatistic.
func (mr *MockMafiaDBInterfaceMockRecorder) GetDailyStatistic(DaySwitchHour interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyStatistic", reflect.TypeOf((*MockMafiaDBInterface)(nil).GetDailyStatistic), DaySwitchHour)
}

// GetLastGame mocks base method.
func (m *MockMafiaDBInterface) GetLastGame() (*db.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastGame")
	ret0, _ := ret[0].(*db.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastGame indicates an expected call of GetLastGame.
func (mr *MockMafiaDBInterfaceMockRecorder) GetLastGame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastGame", reflect.TypeOf((*MockMafiaDBInterface)(nil).GetLastGame))
}

// MarkGamesAsSent mocks base method.
func (m *MockMafiaDBInterface) MarkGamesAsSent(gameIDS []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkGamesAsSent", gameIDS)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkGamesAsSent indicates an expected call of MarkGamesAsSent.
func (mr *MockMafiaDBInterfaceMockRecorder) MarkGamesAsSent(gameIDS interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkGamesAsSent", reflect.TypeOf((*MockMafiaDBInterface)(nil).MarkGamesAsSent), gameIDS)
}

// Transaction mocks base method.
func (m *MockMafiaDBInterface) Transaction(fc func(*gorm.DB) error, opts ...*sql.TxOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Transaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockMafiaDBInterfaceMockRecorder) Transaction(fc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockMafiaDBInterface)(nil).Transaction), varargs...)
}

// UpdateOrCreateUser mocks base method.
func (m *MockMafiaDBInterface) UpdateOrCreateUser(user *db.User) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateUser", user)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateUser indicates an expected call of UpdateOrCreateUser.
func (mr *MockMafiaDBInterfaceMockRecorder) UpdateOrCreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateUser", reflect.TypeOf((*MockMafiaDBInterface)(nil).UpdateOrCreateUser), user)
}
