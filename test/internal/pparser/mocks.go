// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/gsokolovskii/code/mafia_bot/internal/pparser/interfaces.go

// Package test_pparser is a generated GoMock package.
package test_pparser

import (
	io "io"
	http "net/http"
	reflect "reflect"

	db "github.com/GeorgeS1995/mafia_bot/internal/db"
	pparser "github.com/GeorgeS1995/mafia_bot/internal/pparser"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpClientInterface is a mock of HttpClientInterface interface.
type MockHttpClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientInterfaceMockRecorder
}

// MockHttpClientInterfaceMockRecorder is the mock recorder for MockHttpClientInterface.
type MockHttpClientInterfaceMockRecorder struct {
	mock *MockHttpClientInterface
}

// NewMockHttpClientInterface creates a new mock instance.
func NewMockHttpClientInterface(ctrl *gomock.Controller) *MockHttpClientInterface {
	mock := &MockHttpClientInterface{ctrl: ctrl}
	mock.recorder = &MockHttpClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClientInterface) EXPECT() *MockHttpClientInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpClientInterface) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientInterfaceMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClientInterface)(nil).Do), req)
}

// MockPolemicaRequestInterface is a mock of PolemicaRequestInterface interface.
type MockPolemicaRequestInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPolemicaRequestInterfaceMockRecorder
}

// MockPolemicaRequestInterfaceMockRecorder is the mock recorder for MockPolemicaRequestInterface.
type MockPolemicaRequestInterfaceMockRecorder struct {
	mock *MockPolemicaRequestInterface
}

// NewMockPolemicaRequestInterface creates a new mock instance.
func NewMockPolemicaRequestInterface(ctrl *gomock.Controller) *MockPolemicaRequestInterface {
	mock := &MockPolemicaRequestInterface{ctrl: ctrl}
	mock.recorder = &MockPolemicaRequestInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolemicaRequestInterface) EXPECT() *MockPolemicaRequestInterfaceMockRecorder {
	return m.recorder
}

// GetCurrentUserID mocks base method.
func (m *MockPolemicaRequestInterface) GetCurrentUserID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserID")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCurrentUserID indicates an expected call of GetCurrentUserID.
func (mr *MockPolemicaRequestInterfaceMockRecorder) GetCurrentUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserID", reflect.TypeOf((*MockPolemicaRequestInterface)(nil).GetCurrentUserID))
}

// Request mocks base method.
func (m *MockPolemicaRequestInterface) Request(method, url string, body io.Reader, queryParams []*pparser.QueryParams) (*pparser.PolemicaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", method, url, body, queryParams)
	ret0, _ := ret[0].(*pparser.PolemicaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockPolemicaRequestInterfaceMockRecorder) Request(method, url, body, queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockPolemicaRequestInterface)(nil).Request), method, url, body, queryParams)
}

// MockMafiaBotServiceInterface is a mock of MafiaBotServiceInterface interface.
type MockMafiaBotServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMafiaBotServiceInterfaceMockRecorder
}

// MockMafiaBotServiceInterfaceMockRecorder is the mock recorder for MockMafiaBotServiceInterface.
type MockMafiaBotServiceInterfaceMockRecorder struct {
	mock *MockMafiaBotServiceInterface
}

// NewMockMafiaBotServiceInterface creates a new mock instance.
func NewMockMafiaBotServiceInterface(ctrl *gomock.Controller) *MockMafiaBotServiceInterface {
	mock := &MockMafiaBotServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMafiaBotServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMafiaBotServiceInterface) EXPECT() *MockMafiaBotServiceInterfaceMockRecorder {
	return m.recorder
}

// GetLastGame mocks base method.
func (m *MockMafiaBotServiceInterface) GetLastGame() (*db.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastGame")
	ret0, _ := ret[0].(*db.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastGame indicates an expected call of GetLastGame.
func (mr *MockMafiaBotServiceInterfaceMockRecorder) GetLastGame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastGame", reflect.TypeOf((*MockMafiaBotServiceInterface)(nil).GetLastGame))
}

// SaveMinimalGameStatistic mocks base method.
func (m *MockMafiaBotServiceInterface) SaveMinimalGameStatistic(arg0 pparser.MinimalGameStatistic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMinimalGameStatistic", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMinimalGameStatistic indicates an expected call of SaveMinimalGameStatistic.
func (mr *MockMafiaBotServiceInterfaceMockRecorder) SaveMinimalGameStatistic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMinimalGameStatistic", reflect.TypeOf((*MockMafiaBotServiceInterface)(nil).SaveMinimalGameStatistic), arg0)
}

// MockPolemicaParserInterface is a mock of PolemicaParserInterface interface.
type MockPolemicaParserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPolemicaParserInterfaceMockRecorder
}

// MockPolemicaParserInterfaceMockRecorder is the mock recorder for MockPolemicaParserInterface.
type MockPolemicaParserInterfaceMockRecorder struct {
	mock *MockPolemicaParserInterface
}

// NewMockPolemicaParserInterface creates a new mock instance.
func NewMockPolemicaParserInterface(ctrl *gomock.Controller) *MockPolemicaParserInterface {
	mock := &MockPolemicaParserInterface{ctrl: ctrl}
	mock.recorder = &MockPolemicaParserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolemicaParserInterface) EXPECT() *MockPolemicaParserInterfaceMockRecorder {
	return m.recorder
}

// ParseGamesHistory mocks base method.
func (m *MockPolemicaParserInterface) ParseGamesHistory(userID int, opts ...pparser.ParseGameHistoryOptionsParser) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{userID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ParseGamesHistory", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseGamesHistory indicates an expected call of ParseGamesHistory.
func (mr *MockPolemicaParserInterfaceMockRecorder) ParseGamesHistory(userID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{userID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGamesHistory", reflect.TypeOf((*MockPolemicaParserInterface)(nil).ParseGamesHistory), varargs...)
}
