// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/gsokolovskii/code/mafia_bot/internal/db/interfaces.go

// Package test_db is a generated GoMock package.
package test_db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMafiaGormInterface is a mock of MafiaGormInterface interface.
type MockMafiaGormInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMafiaGormInterfaceMockRecorder
}

// MockMafiaGormInterfaceMockRecorder is the mock recorder for MockMafiaGormInterface.
type MockMafiaGormInterfaceMockRecorder struct {
	mock *MockMafiaGormInterface
}

// NewMockMafiaGormInterface creates a new mock instance.
func NewMockMafiaGormInterface(ctrl *gomock.Controller) *MockMafiaGormInterface {
	mock := &MockMafiaGormInterface{ctrl: ctrl}
	mock.recorder = &MockMafiaGormInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMafiaGormInterface) EXPECT() *MockMafiaGormInterfaceMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockMafiaGormInterface) First(dest interface{}, conds ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockMafiaGormInterfaceMockRecorder) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockMafiaGormInterface)(nil).First), varargs...)
}

// Save mocks base method.
func (m *MockMafiaGormInterface) Save(value interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", value)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMafiaGormInterfaceMockRecorder) Save(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMafiaGormInterface)(nil).Save), value)
}

// Where mocks base method.
func (m *MockMafiaGormInterface) Where(query interface{}, args ...interface{}) *gorm.DB {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockMafiaGormInterfaceMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockMafiaGormInterface)(nil).Where), varargs...)
}
